C++:
class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        
        int left = 0, mini = nums.size() + 1, sum = 0;
       
        for(int j = 0; j < nums.size(); j++){
            sum = sum + nums[j];   
            while(sum >= s) {
                 mini = min(j - left + 1, mini);
                 sum = sum - nums[left];
                 left++;   
            }      
        }
      
         return mini == nums.size() + 1 ? 0: mini;
        
    }
};
java:
public class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        int n = nums.length, start = 0, sum = 0, minlen = nums.length + 1;
        for (int i = 0; i < n; i++) { 
            sum += nums[i]; 
            while (sum >= s) {
                minlen = Math.min(minlen, i - start + 1);
                sum -= nums[start++];
            }
        }
        return minlen == nums.length + 1 ? 0 : minlen;
    }
}
