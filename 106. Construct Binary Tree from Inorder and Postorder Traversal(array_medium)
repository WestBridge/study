java:
//A easy way,but it's not efficient.
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        return helper(postorder.length - 1, 0, inorder.length - 1, inorder, postorder);
    }
    public TreeNode helper(int postEnd, int inStart, int inEnd, int[] inorder, int[] postorder){
        if(postEnd < 0 || inStart > inEnd) return null;
        TreeNode root = new TreeNode(postorder[postEnd]);
        int index = 0;
        for(int i = inStart; i <= inEnd; i++){
            if(inorder[i] == postorder[postEnd])
              index = i;       
        }
        root.right = helper(postEnd - 1, index + 1, inEnd, inorder, postorder);
        root.left = helper(postEnd - inEnd + index - 1, inStart, index - 1, inorder, postorder);
        return root;
        
    }
}

C++:
