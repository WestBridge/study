java:
//A easy way,but it's not efficient.
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        return helper(postorder.length - 1, 0, inorder.length - 1, inorder, postorder);
    }
    public TreeNode helper(int postEnd, int inStart, int inEnd, int[] inorder, int[] postorder){
        if(postEnd < 0 || inStart > inEnd) return null;
        TreeNode root = new TreeNode(postorder[postEnd]);
        int index = 0;
        for(int i = inStart; i <= inEnd; i++){
            if(inorder[i] == postorder[postEnd])
              index = i;       
        }
        root.right = helper(postEnd - 1, index + 1, inEnd, inorder, postorder);
        root.left = helper(postEnd - inEnd + index - 1, inStart, index - 1, inorder, postorder);
        return root;
        
    }
}

C++:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.size() == 0) return NULL;
        int inP = inorder.size() - 1, postP = postorder.size() - 1;
        TreeNode* root = new TreeNode(postorder[postP--]);
        TreeNode* curP = NULL;
        stack<TreeNode*> roots;
        roots.push(root);
        while(true){
            if(inorder[inP] == roots.top()->val ){
                curP = roots.top();
                roots.pop();
                inP--;
                if(inP < 0) break;
                if(roots.size() && inorder[inP] == roots.top()->val) continue;
                curP->left = new TreeNode(postorder[postP]);
                postP--;
                roots.push(curP->left);
                
            }
            else{
                curP = new TreeNode(postorder[postP]);
                postP--;
                roots.top()->right = curP;
                roots.push(curP);
                
            }
            
        }
        return root;
    }
};
