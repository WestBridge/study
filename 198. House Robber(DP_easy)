C++:
class Solution {
public:
    int rob(vector<int>& nums) {
        
        if(nums.size() == 0) return 0;
        if(nums.size() == 1) return nums[0];
        int m[nums.size()];
        m[0] = nums[0];
        m[1] = max(nums[0], nums[1]);
        
        for(int i = 2; i < nums.size(); i++){
            m[i]=max(m[i - 1], nums[i] + m[i - 2]);
        }
        return m[nums.size() - 1];
        
    }
};
//better way
class Solution {
public:
    int rob(vector<int>& nums) {
        
        if(nums.size() == 0) return 0;
        if(nums.size() == 1) return nums[0];
        int left = nums[0];
        int right = max(nums[0], nums[1]);
        
        for(int i = 2; i < nums.size(); i++){
            int temp = right;
            right = max(temp, nums[i] + left);
            left =temp;
        }
        return right;
        
    }
};

JAVA:
class Solution {
    public int rob(int[] nums) {
        if(nums.length == 0) return 0;
        if(nums.length == 1) return nums[0];
        int left = nums[0];
        int right = Math.max(nums[0], nums[1]);
        for(int i = 2; i < nums.length; i++){
            int temp = right;
            right =Math.max(temp, left + nums[i]);
            left = temp;
        }
        return right;
    }
}
