java:
class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n+1];
        for(int i = 1; i <= n; i++){
            int min = Integer.MAX_VALUE;
            int j =1;
            while(i - j*j >=0){
                min = Math.min(min,dp[i-j*j]+1);
                ++j;
            }
            dp[i] = min;
        }
        return dp[n];
    }
}

C++:
class Solution {
public:
    int numSquares(int n) {
        vector<int> dp{0} ;
        int m = dp.size();
        dp.resize(max(m, n+1), 0);
        
        for(int i=1; i<=n; i++){
            int Min = n;
            int j = 1;
            while(i-j*j >=0){
                Min = min(Min, dp[i-j*j]+1);
                j++;
            }
            dp[i]=Min;
        }
        return dp[n];
    }
};
//best one
class Solution 
{  
private:  
    int is_square(int n)
    {  
        int sqrt_n = (int)(sqrt(n));  
        return (sqrt_n*sqrt_n == n);  
    }
    
public:
   
    int numSquares(int n) 
    {  
     
        if(is_square(n)) 
        {
            return 1;  
        }
  
        while ((n & 3) == 0) // n%4 == 0  
        {
            n >>= 2;  
        }
        if ((n & 7) == 7) // n%8 == 7
        {
            return 4;
        }
        
      
        int sqrt_n = (int)(sqrt(n)); 
        for(int i = 1; i <= sqrt_n; i++)
        {  
            if (is_square(n - i*i)) 
            {
                return 2;  
            }
        }  
        
        return 3;  
    }  
}; 

