c++:
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        vector<int> dp(cost.size(), 0);
        dp[1] = min(cost[0], cost[1]);
        for(int i = 2; i < cost.size(); i++){
            dp[i] = min(cost[i] + dp[i - 1], cost[i - 1] + dp[i - 2]);
        }
        return dp[cost.size() - 1];
    }
};

java:
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int[] dp = new int[cost.length];
        dp[1] = cost[0] < cost[1] ? cost[0] : cost[1];
        for(int i = 2; i < cost.length; i++){
            dp[i] = Math.min(cost[i] + dp[i - 1], cost[i - 1] + dp[i - 2]);
        }
        return dp[cost.length - 1];
    }
}
