


//It is not a good solution ,but it is my first thought.
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> triangle;
        vector<int> previous;
        if(numRows>0){
            
          for(int i=0;i<numRows;i++){
            vector<int> current;
            if(i==0){
                current.push_back(1);
                triangle.push_back(current);
            }
            else if(i==1){
                current.push_back(1);
                current.push_back(1);
                triangle.push_back(current);
            }
            else{
                previous=triangle[i-1];
                for(int j=0;j<i+1;j++){
                    if(j==0||j==i)
                    {
                        current.push_back(1);
                    }
                    else{
                        current.push_back(previous[j-1]+previous[j]);
                        
                    }
                }
                triangle.push_back(current);
            }
          }
        }
        return triangle;
    }
};

//a more simple one.

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
       vector<vector<int>> result;
      for (int i = 0; i < numRows; i++){
      vector<int> t(i + 1, 1);
	  result.push_back(t);
	  if (i >= 2){
		for (int j = 1; j < i; j++){
			result[i][j] = result[i - 1][j - 1] + result[i - 1][j];
	    	}
    	}
  }
      return result;

    }
};

javaï¼š
public class Solution {
    public List<List<Integer>> generate(int numRows) {
     List<List<Integer>> triangle = new ArrayList<>(numRows);
    for (int i=0; i<numRows; i++) {
        List<Integer> array = new ArrayList<>(i+1);
        for (int j=0; j<i+1; j++) {
            if (j == 0|| j == i) array.add(1);
            else {
                array.add(
                    triangle.get(i-1).get(j-1) + 
                    triangle.get(i-1).get(j) 
                );
            }
        }
        triangle.add(array);
    }
    return triangle;


    }
}


