C++:
class Solution {
public:
    bool PredictTheWinner(vector<int>& nums) {
        int length = nums.size();
        if(length & 1 == 0) return true;
        vector<int> dp(length, 0);
        for(int i = length; i >= 0; i--){
            for(int j = i; j < length; j++){
                if(i == j)
                    dp[j] = nums[j];
                else{
                    dp[j] = max(nums[i] - dp[j], nums[j] - dp[j - 1]);
                }
            }
        }
        return dp[length - 1] >= 0;
    }
};

java:
class Solution {
    
public boolean PredictTheWinner(int[] nums) {
    if (nums == null) { return true; }
    int n = nums.length;
    if ((n & 1) == 0) { return true; } // Improved with hot13399's comment.
    int[] dp = new int[n];
    for (int i = n - 1; i >= 0; i--) {
        for (int j = i; j < n; j++) {
            if (i == j) {
                dp[i] = nums[i];
            } else {
                dp[j] = Math.max(nums[i] - dp[j], nums[j] - dp[j - 1]);
            }
        }
    }
    return dp[n - 1] >= 0;
}
}
