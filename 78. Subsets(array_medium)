C++:
class Solution {
    public:  
    vector<vector<int>>res; 
    vector<int>ans;    
    vector<vector<int>> subsets(vector<int>& nums) { 
        if(nums.empty()) 
        return res;     
        sort(nums.begin(), nums.end());     
        dfs(0, ans, nums);       
        return res;       
        }    
        void dfs(int k, vector<int>ans, vector<int> nums){  
            res.push_back(ans);      
            for(int i = k; i < nums.size(); i++){  
                ans.push_back(nums[i]);    
                dfs(i + 1, ans, nums);  
                ans.pop_back();     
                }   
                }
    
}; 
//another solution
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        
        sort(nums.begin(),nums.end());
        int elem_num=nums.size();
        int subset_num=pow(2,elem_num);
        vector<vector<int>> subset_set(subset_num,vector<int>());
        for(int i = 0; i < elem_num; i++){
            for(int j = 0;j < subset_num; j++){
                if((j>>i)&1) 
                subset_set[j].push_back(nums[i]);
            }
            
        }
        return subset_set;
    }
};
java:
public class Solution {
    
    public List<List<Integer>> subsets(int[] nums) {
         List<List<Integer>> res = new ArrayList<List<Integer>> ();
         List<Integer> item = new ArrayList<Integer>();
         if(nums.length == 0 || nums == null)
            return res;
         Arrays.sort(nums);
         for(int len = 1; len <= nums.length; len++)
             dfs(nums,0,len,item,res);
         res.add(new ArrayList<Integer>());
         return res;

}

     public static void dfs(int[] nums, int start, int len, List<Integer> item,List<List<Integer>> res){
         if(item.size() == len){
           res.add(new ArrayList<Integer>(item));
             return;
        }
         for(int i = start; i < nums.length; i++){
             item.add(nums[i]);
             dfs(nums, i+1, len, item, res);
             item.remove(item.size()-1);
        }

    } 

    
}
