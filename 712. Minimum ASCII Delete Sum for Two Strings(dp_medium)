c++:
class Solution {
public:
       int minimumDeleteSum(string s1, string s2) {
        int m = s1.size(), n = s2.size();
        int dp[m+1][n+1] = {0};
        for (int j = 1; j <= n; j++) dp[0][j] = dp[0][j-1]+s2[j-1];
        for (int i = 1; i <= m; i++) {
            dp[i][0] = dp[i-1][0]+s1[i-1];
            for (int j = 1; j <= n; j++) 
                dp[i][j] = s1[i-1] == s2[j-1]? dp[i-1][j-1]:min(dp[i-1][j]+s1[i-1], dp[i][j-1]+s2[j-1]);
        }
        return dp[m][n];
    }
};
java:
class Solution {
    public int minimumDeleteSum(String s1, String s2) {
        int m = s1.length(), n = s2.length();
        int[][] dp = new int[m + 1][n + 1];
        for(int j = 1; j <= n; j++) dp[0][j] = dp[0][j - 1] + s2.charAt(j - 1);
        for(int i = 1; i <= m; i++){
            dp[i][0] = dp[i - 1][0] + s1.charAt(i - 1);
            for(int j = 1; j <= n; j++){
                dp[i][j] = s1.charAt(i - 1) == s2.charAt(j - 1) ? dp[i - 1][j - 1] : Math.min(dp[i - 1][j] + s1.charAt(i - 1), dp[i][j - 1] + s2.charAt(j - 1));
            }
        }
        return dp[m][n];
    }
}
