C++:
class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        map<int,int> m;
        m[0] = -1;
        int sum = 0;
        for(int i = 0; i < nums.size(); i++){
            sum += nums[i];
            if(k != 0) sum %= k;
            if(m.find(sum) != m.end()) {
                if(i - m[sum] > 1)
                   return true;
            }
            else{
                m[sum] = i;
            }
        }
        return false;
    }
};

//another way
class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        int n = nums.size(), sum = 0, pre = 0;
        unordered_set<int> st;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
            int t = (k == 0) ? sum : (sum % k);
            if (st.count(t)) return true;
            st.insert(pre);
            pre = t;
        }
        return false;
    }
};

JAVA:
class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<Integer, Integer>(){{put(0,-1);}};
        int sum = 0;
        for(int i = 0; i < nums.length; i++){
            sum += nums[i];
            if(k != 0) sum %= k;
            Integer prev = map.get(sum);
            if(prev != null) {
                if(i - prev > 1)
                   return true;
            }
            else{
                map.put(sum, i);
            }
        }
        return false;
    }
}
