
java:
class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        int dp[][] = new int[m + 1][n + 1];
        int zeros, ones;
        for(String str : strs)
        {
            zeros = 0;
            ones = 0;
            for(int i = 0; i < str.length(); i++)
                if(str.charAt(i) == '0') 
                    zeros++;
                else
                    ones++;
            for(int i = m; i >= zeros; i--){
                for(int j = n; j >= ones; j--){
                    dp[i][j] = Math.max(dp[i][j], dp[i - zeros][j - ones] + 1);
                }
            }
        }
        return dp[m][n];
          
    }
}
C++:
class Solution {
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        int zeros, ones;
        for(string str : strs){
            zeros = 0;
            ones = 0;
            for(auto a : str) ('0' == a) ? zeros++ : ones++;
            for(int i = m; i >= zeros; --i){
                for(int j = n; j >= ones; --j){
                      dp[i][j] = max(dp[i][j], dp[i - zeros][j - ones] + 1);
                }
            }
        }
        return dp[m][n];
    }
};
