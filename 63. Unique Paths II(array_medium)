C++:
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int row=obstacleGrid.size();
        int column=obstacleGrid[0].size();
        int flag=0;
        for(int i=0;i<column;i++){
            if(obstacleGrid[0][i]==1) flag=1;
            if(flag==1) obstacleGrid[0][i]=0;
            else obstacleGrid[0][i]=1;
            
        }
        if(obstacleGrid[0][0]==0) flag=1;
        else flag=0;
        for(int i=1;i<row;i++){
            if(obstacleGrid[i][0]==1) flag=1;
            if(flag==1) obstacleGrid[i][0]=0;
            else obstacleGrid[i][0]=1;
        }
        for(int j=1;j<row;j++){
            for(int i=1;i<column;i++){
                if(obstacleGrid[j][i]==1)  obstacleGrid[j][i]=0;
                else
                obstacleGrid[j][i]=obstacleGrid[j-1][i]+obstacleGrid[j][i-1];
            }
        }
        return obstacleGrid[row-1][column-1];
        
    }
};
java:
public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int row=obstacleGrid.length;
        int column=obstacleGrid[0].length;
        int flag=0;
        for(int i=0;i<column;i++){
            if(obstacleGrid[0][i]==1) flag=1;
            if(flag==1)
              obstacleGrid[0][i]=0;
            else
              obstacleGrid[0][i]=1;
        }
          if(obstacleGrid[0][0]==0) flag=1;
          else flag=0;
        for(int i=1;i<row;i++){
           if(obstacleGrid[i][0]==1) flag=1;
           if(flag==1)
             obstacleGrid[i][0]=0;
           else
             obstacleGrid[i][0]=1;
        }
        for(int j=1;j<row;j++){
            for(int i=1;i<column;i++){
                if(obstacleGrid[j][i]==1)
                   obstacleGrid[j][i]=0;
                else
                   obstacleGrid[j][i]=obstacleGrid[j-1][i]+obstacleGrid[j][i-1];
            }
        }
        return  obstacleGrid[row-1][column-1];
    }
}
