C++:
//first thought
class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& A) {
        if(A.size() < 3) return 0;
        int sum = 0;
        for(int i = 2; i < A.size(); i++){
            for(int j = 0; j < A.size() - i; j++){
                sum += helper(j, j + i, A);
            }
        }
        return sum;
    }
    int helper(int begin, int end, vector<int>& A){
        int diff = A[begin + 1] - A[begin];
        for(int i = begin + 1; i < end; i++){
            if(A[i + 1] - A[i] != diff)
                return 0;
        }
        return 1;
    }
};

//better one
class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& A) {
        if(A.size() < 3) return 0;
        int sum = 0;
         for(int i = 0; i < A.size(); i++){
           for(int j = 2; j < A.size() - i; j++){
                bool flag = helper(i, i + j, A);
                if(flag) sum++;
                else break;
                
            }
        }
        return sum;
    }
    bool helper(int begin, int end, vector<int>& A){
        int diff = A[begin + 1] - A[begin];
        for(int i = begin + 1; i < end; i++){
            if(A[i + 1] - A[i] != diff)
                return false;
        }
        return true;
    }
};


JAVA:
class Solution {
    public int numberOfArithmeticSlices(int[] A) {
        int sum = 0;
        for(int i = 0; i < A.length; i++){
            for(int j = 2; j < A.length - i; j++){
                if(helper(i, i + j, A)) sum++;
                else break;
            }
        }
        return sum;
    }
    public boolean helper(int begin, int end, int[] A){
        int diff = A[begin + 1] - A[begin];
        for(int i = begin + 1; i < end; i++){
            if(A[i + 1] - A[i] != diff)
                return false;
            
        }
        return true;
    }
}
