java :
public class Solution {
    public void nextPermutation(int[] nums) {
        int n=nums.length;
        if(n<2) return ;
        int i=n-1;
        int j=n-1;
        
        while(i>0&&nums[i-1]>=nums[i]) i--;
       
        if(i>0) 
        {
          while(j>i-1)
          {
            if(nums[j]>nums[i-1]) 
            {
             swap(nums,i-1,j);
             break;
            }
            else j--;
          }
        }
        reverse(nums,i);
    }
    
    private void swap(int[] nums,int i,int j){
             int temp=nums[j];
             nums[j]=nums[i];
             nums[i]=temp;
    }
    private void reverse(int[] nums,int i){
        int j=nums.length-1;
        while(i<j)
        {
            int temp=nums[i];
            nums[i]=nums[j];
            nums[j]=temp;
            i++;
            j--;
        }
    }
}
C++:
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n=nums.size();
        if(n<2) return ;
        int i=n-1;
        int j=n-1;
        while(i>0&&nums[i-1]>=nums[i]) i--;
        if(i>0){
            while(j>0){
                if(nums[j]>nums[i-1]) 
                {
                    swap(nums[i-1],nums[j]);
                    break;
                }
                else j--;
            }
        }
        reverse(nums.begin()+i,nums.end());
    }
};
