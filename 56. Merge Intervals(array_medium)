c++:
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        
        if(intervals.empty()) return vector<Interval>();
        vector<Interval> results;
        sort(intervals.begin(),intervals.end(),[](Interval a,Interval b){return a.start<b.start;});
        results.push_back(intervals[0]);
        for(int i=0;i<intervals.size();i++){
            if(results.back().end<intervals[i].start)
            {
               results.push_back(intervals[i]);
            }
            else
            {
                results.back().end=max(results.back().end,intervals[i].end);
            }
        }
        return results;
        
    }
};

java:
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        
        if(intervals.size()<=1) return intervals;
        Collections.sort(intervals,new Comparator<Interval>(){
            public int compare(Interval a,Interval b){
                return a.start-b.start;
            }
        });// Sort by ascending 
        List<Interval> results = new ArrayList<Interval>();
        int start = intervals.get(0).start;
        int end = intervals.get(0).end;
        for(Interval interval:intervals){
            if(interval.start<=end) {
               end=Math.max(interval.end,end);
              
            }
            else{
                results.add(new Interval(start,end));
                start=interval.start;
                end=interval.end;
            }
            
        }
        results.add(new Interval(start,end));
        return results;
    }
}
