C++ï¼š
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
         if (matrix.empty()) return {};
        int m = matrix.size(), n = matrix[0].size();
        vector<int> spiral(m * n);
        int u = 0, d = m - 1, l = 0, r = n - 1, k = 0;
        while (true) {
            // up
            for (int col = l; col <= r; col++) spiral[k++] = matrix[u][col];
            if (++u > d) break;
            // right
            for (int row = u; row <= d; row++) spiral[k++] = matrix[row][r];
            if (--r < l) break;
            // down
            for (int col = r; col >= l; col--) spiral[k++] = matrix[d][col];
            if (--d < u) break;
            // left
            for (int row = d; row >= u; row--) spiral[k++] = matrix[row][l];
            if (++l > r) break;
        }
        return spiral;
    }
};
java:
public class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        int length=matrix.length;
       
        if(length==0) return new ArrayList<Integer>();
        int num=matrix[0].length;
         ArrayList<Integer> list=new ArrayList<Integer>(length*num);
        
        int u,d,l,r;
        u=0;d=length-1;l=0;r=matrix[0].length-1;
        while(true){
            for(int i=l;i<=r;i++) list.add(matrix[u][i]);
            if(++u>d) break;
            for(int i=u;i<=d;i++) list.add(matrix[i][r]);
            if(--r<l) break;
            for(int i=r;i>=l;i--) list.add(matrix[d][i]);
            if(--d<u) break;
            for(int i=d;i>=u;i--) list.add(matrix[i][l]);
            if(++l>r) break;
        }
        return list;
        
    }
}

