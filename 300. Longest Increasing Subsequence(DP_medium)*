C++:
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        
        if(nums.size()==0) return 0;  
        vector<int> dp;
        dp.resize(nums.size(),0);
        dp[0]=1;
        int maxans=1;
        for(int i = 1; i <nums.size(); i++){
            int maxval = 0;
            for(int j = 0; j < i; j++){
                 if(nums[i] > nums[j])
                   maxval=max(maxval,dp[j]);
            }
            dp[i]=maxval+1;
            maxans=max(maxans,dp[i]);
        }
        return maxans;
    }
};
java:
class Solution {
    public int lengthOfLIS(int[] nums) {
        if(nums.length == 0) return 0;
        int[] dp = new int[nums.length];
        int maxans = 1;
        dp[0] = 1;
        for(int i = 1; i < nums.length; i++){
            int maxval = 0;
            for(int j = 0; j < i; j++){
                
                if(nums[i] > nums[j])
                    maxval = Math.max(maxval, dp[j]);
            }
            dp[i] = maxval + 1;
            maxans = Math.max(maxans,dp[i]);
        }
        return maxans;
    }
}
//better one:

public class Solution {
    public int lengthOfLIS(int[] nums) {            
        int[] dp = new int[nums.length];
        int len = 0;

        for(int x : nums) {
            int i = Arrays.binarySearch(dp, 0, len, x);
            if(i < 0) i = -(i + 1);
            dp[i] = x;
            if(i == len) len++;
        }

        return len;
    }
}

