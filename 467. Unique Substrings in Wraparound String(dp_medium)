java:
class Solution {
    public int findSubstringInWraproundString(String p) {
         
        int[] dp = new int[26];
        int maxLengthCur = 0;
        for(int i = 0; i < p.length(); i++){
           
            if(i > 0 && (p.charAt(i) - p.charAt(i - 1) == 1 || p.charAt(i) - p.charAt(i - 1) == -25)){
                maxLengthCur++;
            }
            else{
                maxLengthCur = 1;          
            }
                
            int index = p.charAt(i) - 'a';
            dp[index] = Math.max(dp[index], maxLengthCur);
        }
        int sum = 0;
        for(int i = 0; i < 26; i++){
            sum += dp[i];
        }
        return sum;
    }
}
c++:
class Solution {
public:
    int findSubstringInWraproundString(string p) {
        
       vector<int> count(26, 0);
        int maxLengthCur = 0;
        for(int i = 0; i < p.size(); i++){
            if(i > 0 && (p[i] - p[i - 1] == 1 || p[i] - p[i - 1] == -25))
                maxLengthCur ++;
            else
                maxLengthCur = 1;
            int index = p[i] - 'a';
            count[index] = max(count[index], maxLengthCur);
        }
        int sum = 0;
        for(int i = 0; i < 26; i++)
            sum += count[i];
        return sum;
    }
};
