C++:
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        if(nums.size() == 0) return 0;
        int sum = 0, count = 0;
        unordered_map<int, int> map;
        map[0] = 1;
        for(int i = 0; i < nums.size(); i++){
             sum += nums[i];
             count += map[sum - k];
             map[sum]++;
        }
       return count;
    }
};
JAVA:
public class Solution {
    public int subarraySum(int[] nums, int k) {
        if(nums.length == 0) return 0;
        int sum = 0, count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        for(int i = 0; i < nums.length; i++){
            sum += nums[i];
            count += map.getOrDefault(sum - k, 0);
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return count;
    }
}
