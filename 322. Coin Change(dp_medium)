C++:
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        vector<int> dp(amount + 1, amount + 1);
        dp[0] = 0;
        for(int i = 1; i <= amount; i++){  
            for(int j = 0; j < coins.size(); j++){
                if(i - coins[j] >= 0)
                  dp[i] = min(dp[i], dp[i - coins[j]] + 1); 
            }
             
        }
        return dp[amount] > amount ? -1 : dp[amount];
    }
};
JAVA:
class Solution {
    public int coinChange(int[] coins, int amount) {
        int []dp = new int[amount + 1];
        Arrays.fill(dp, amount + 1);
        dp[0] = 0;
        for(int i = 1; i <= amount; i++){
            for(int j = 0; j < coins.length; j++){
                if(i - coins[j] >= 0)
                  dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);
            }
        }
        return dp[amount] > amount ? -1 : dp[amount];
    }
}
