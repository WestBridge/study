C++:
class Solution {
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> res;
        vector<int> vec;
        subsetsWithDup(res, nums, vec ,0);
        return res;
      
    }
private:
	void subsetsWithDup(vector<vector<int> > &res, vector<int> &nums, vector<int> &vec, int begin) {
	    res.push_back(vec);
	    for(int i = begin; i != nums.size(); i++){
	        if( i == begin || nums[i] != nums[i-1]){
	            vec.push_back(nums[i]);
	            subsetsWithDup(res, nums, vec, i + 1);
	            vec.pop_back();
	        }
	    }
	}
	
};
java:
public class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList();
        List<Integer> list = new ArrayList();
        subsetsWithDup(res,nums,list,0);
        return res;
    }
     public void subsetsWithDup(List<List<Integer>> res, int[] nums, List<Integer> list, int begin) {
         res.add(list);
         for(int i = begin; i < nums.length ; i++){
             if( i == begin || nums[i] != nums[i - 1]){
                 list.add(nums[i]);
                 subsetsWithDup(res,nums,new ArrayList<>(list),i + 1);
                 list.remove(list.size() - 1);
             }
         }
     }
}
