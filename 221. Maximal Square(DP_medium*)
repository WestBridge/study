//C++:23m
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.empty()) return 0;
        int m = matrix.size();
        int n = matrix[0].size();
        int maxsquare=0, pre=0;
        vector<int> dp(m+1,0);
        for(int j=0; j<n; j++){
            for(int i=1; i<=m; i++){
                int temp = dp[i];
                if(matrix[i-1][j]=='1'){
                    dp[i]=min(dp[i],min(dp[i-1],pre))+1;
                    maxsquare=max(maxsquare,dp[i]);
                }
                else dp[i]=0;
                pre=temp;
            }
        }
         return maxsquare*maxsquare;
    }
  
};
//better way
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int rst = 0;
    for(int i=0; i<matrix.size(); ++i)
    {
        for(int j=0; j<matrix[0].size(); ++j)
        {
            int a = (i&&j) ? matrix[i-1][j-1] : 0;
            int b = (i) ? matrix[i-1][j] : 0;
            int c = (j) ? matrix[i][j-1] : 0;
            matrix[i][j] = (matrix[i][j]>'0') ? (min(a, min(b, c))+1) : 0;        
            rst = max(rst, matrix[i][j]*matrix[i][j]);
        }
    }
    return rst;
    }
  
};

java:
class Solution {
    public int maximalSquare(char[][] matrix) {
        int rst=0;
        for(int i=0; i<matrix.length; i++){
            for(int j=0; j<matrix[0].length; j++){
                int a=(i>0 && j>0) ? matrix[i-1][j-1] : 0;
                int b=(i>0) ? matrix[i-1][j] : 0;
                int c=(j>0) ? matrix[i][j-1] : 0;
                matrix[i][j]=(matrix[i][j]>'0')?(char)(Math.min(a,Math.min(b,c))+1):(char)0;     
                rst=Math.max(rst,matrix[i][j]*matrix[i][j]);
            }
        }
        return rst;
    }
}

//another way

class Solution {
    public int maximalSquare(char[][] matrix) {
        int rows = matrix.length, cols = rows > 0 ? matrix[0].length : 0;
        int[] dp = new int[cols + 1];
        int maxsqlen = 0, prev = 0;
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= cols; j++) {
                int temp = dp[j];
                if (matrix[i - 1][j - 1] == '1') {
                    dp[j] = Math.min(Math.min(dp[j - 1], prev), dp[j]) + 1;
                    maxsqlen = Math.max(maxsqlen, dp[j]);
                } else {
                    dp[j] = 0;
                }
                prev = temp;
            }
        }
        return maxsqlen * maxsqlen;
    }
}
