JAVA:
//Time Limit Exceeded
class Solution {
    public int combinationSum4(int[] nums, int target) {
        int dp[] = new int[target + 1];
		 dp[0] = 1;
		 return helper(nums, target, dp);
    }
    public static int helper(int[] nums, int target, int[] dp){
		    if(target < 0) return 0;
	        if(target == 0) return 1;
	        int sum = 0;   
	        for(int i = 0; i < nums.length; i++){
	        	int temp = 0;
	        	if(target - nums[i] >= 0){
	        	   temp = dp[target - nums[i]];
	        	}
	        	if( temp > 0)
	        	   sum += temp;
	        	else
	               sum += helper(nums, target - nums[i], dp);
	        }
	        dp[target] = sum;
	        return sum;
	}
}
//better one
class Solution {
    public int combinationSum4(int[] nums, int target) {
         int dp[] = new int[target + 1];
		 dp[0] = 1;
	      for (int i = 1; i < dp.length; i++) {
            for (int j = 0; j < nums.length; j++) {
              if (i - nums[j] >= 0) {
                dp[i] += dp[i - nums[j]];
              }
           }
         }    
	      return dp[target];      
    }   
}

C++:
//Time Limit Exceeded
class Solution {
public:
    int combinationSum4(vector<int>& nums, int target) {
        if(target < 0) return 0;
	        if(target == 0) return 1;
	        int sum = 0;
	        for(int i = 0; i < nums.size(); i++){
	            sum += combinationSum4(nums, target - nums[i]);
	        }
	        return sum;
    }
    
};
//better one
class Solution {
public:
    int combinationSum4(vector<int>& nums, int target) {
        
        vector<int> dp(target + 1, 0);
        dp[0] = 1;
        for(int i = 1; i <= target; i++){
            for(int j = 0; j < nums.size(); j++){
                if(i - nums[j] >= 0){
                    dp[i] += dp[i - nums[j]];
                }
            }
        }
        return dp[target];
    } 
};
