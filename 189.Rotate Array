java:
//solution 1
public class Solution {
    public void rotate(int[] nums, int k) {
        
        if(k!=0){
            k%=nums.length;
        reverse(nums,0,nums.length-1);
        reverse(nums,0,k-1);
        reverse(nums,k,nums.length-1);
        }
    }
    public void reverse(int[]nums,int i,int j){
        int temp;
        while(i<j){
            temp= nums[i];
            nums[i]=nums[j];
            nums[j]=temp;
            i++;
            j--;
        }
    }
}

//solution 2
 public void rotate_1(int[] nums, int k){
        if(nums==null || nums.length<2) return;
        final int N = nums.length;
        int[] temp = nums.clone();
        int mid = N-k%N;
        int index = 0;
        for(int i=mid; i<N; i++, index++){
            nums[index] = temp[i];
        }
        for(int i=0; i<mid; i++, index++){
            nums[index] = temp[i];
        }
    }
    
    c++:
    class Solution {
public:
    void rotate(vector<int>& nums, int k) {
         if(k!=0){
            k%=nums.size();
        reverse(nums.begin(),nums.end());
        reverse(nums.begin(),nums.begin()+k); 
        reverse(nums.begin()+k,nums.end());
       
        }
    }
};
