c++:
class Solution {
public:
    int findLongestChain(vector<vector<int>>& pairs) {
        int length = pairs.size();
        if(length <= 1) return length;
        sort(pairs.begin(),pairs.end());
        vector<int> dp(length, 0);
        dp[0] = 1;
        for(int i = 1; i < length; i++){
            for(int j = i - 1; j >= 0; j--){
                  if(pairs[i][0] > pairs[j][1]){
                      dp[i] = dp[j] + 1;
                      break;
                  }
                else
                    dp[i] = 1;
            
            }
            
        }
      return dp[length - 1];
        
    }
};

java:
class Solution {
    public int findLongestChain(int[][] pairs) {
        if(pairs == null || pairs.length == 0) return 0;
        int[] dp = new int[pairs.length];
        Arrays.sort(pairs,(a, b) -> (a[0] - b[0]));
        Arrays.fill(dp, 1);
        for(int i = 1; i < pairs.length; i++){
            for(int j = i - 1; j >= 0; j-- ){
                if(pairs[i][0] > pairs[j][1]){
                    dp[i] = dp[j] + 1;
                    break;
                }
            }
        }
        return dp[pairs.length - 1];
    }
}
