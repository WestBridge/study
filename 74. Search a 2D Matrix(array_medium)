C++:
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int low=0,high=matrix.size()-1;
        if(high<0) return false;
        if(matrix[0].size()==0) return false;
        int mid,row;
        while(low<=high){
            mid=(low+high)/2;
            int cur=matrix[mid][0];
            if(cur==target) return true;
            if(cur>target) high=mid-1;
            else low=mid+1;
        }
        row=low-1;
        if(row<0) return false;
        low=0;high=matrix[0].size();
        while(low<=high){
            mid=(low+high)/2;
            int cur=matrix[row][mid];
            if(cur==target) return true;
            if(cur>target) high=mid-1;
            else low=mid+1;
        }
        return false;
    }
};
JAVA:
public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int low=0,high=matrix.length-1;
        if(high<0) return false;
        if(matrix[0].length==0) return false;
        int mid,row;
        while(low<=high){
            mid=(low+high)/2;
            if(matrix[mid][0]==target) return true;
            if(matrix[mid][0]>target){
                high=mid-1;
            }
            if(matrix[mid][0]<target){
                low=mid+1;
            }
        }
        row=low-1;
        if(row<0) return false;
        low=0;high=matrix[0].length-1;
        while(low<=high){
            mid=(low+high)/2;
            if(matrix[row][mid]==target) return true;
            if(matrix[row][mid]<target) low=mid+1;
            if(matrix[row][mid]>target) high=mid-1;
        }
        return false;
    }
}
//new solution
 public class Solution {
        public boolean searchMatrix(int[][] matrix, int target) {
            if (matrix == null || matrix.length == 0) {
                return false;
            }
            int start = 0, rows = matrix.length, cols = matrix[0].length;
            int end = rows * cols - 1;
            while (start <= end) {
                int mid = (start + end) / 2;
                if (matrix[mid / cols][mid % cols] == target) {
                    return true;
                } 
                if (matrix[mid / cols][mid % cols] < target) {
                    start = mid + 1;
                } else {
                    end = mid - 1;
                }
            }
            return false;
        }
    }
