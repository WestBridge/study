C++:
//my solution
class Solution {
public:
    int search(vector<int>& nums, int target) {
      int n=nums.size();
      if(n==0) return -1;
      if(nums[0]>target)
      {
          int j=n-1;
          while(j>=0&&nums[j]>=target){
             if(nums[j]==target) return j;
             j--;
         }
    
      }
      else{
          int k=0;
          while(k<n&&nums[k]<=target)
          {
              if(nums[k]==target) return k;
              k++;
          }
      }
      return -1;
    }
};

//binary search
class Solution {
public:
    int search(vector<int>& nums, int target) {
      
      int start=0;
      int end=nums.size()-1;
      while(start<=end){
          int mid=(start+end)/2;
          if(nums[mid]==target) return mid;
          if(nums[start]<=nums[mid]){
              if(target>=nums[start]&&target<nums[mid])
              end=mid-1;
              else 
              start=mid+1;
          }
          if(nums[mid]<=nums[end]){
              if(target>nums[mid]&&target<=nums[end])
              start=mid+1;
              else
              end=mid-1;
          }
      }
      return -1;
    }
};

java:
//my solution
public class Solution {
public int search(int[] nums, int target) {
    int n=nums.length;
    if(n==0) return -1;
    
    if(nums[0]>target){
        int i=n-1;
        while(i>=0&&nums[i]>=target){
            if(nums[i]==target) return i;
            i--;
        }
    }
    else{
        int j=0;
        while(j<n&&nums[j]<=target){
            if(nums[j]==target) return j;
            j++;
        }
    }
    return -1;
}
}
//binary search
public class Solution {
public int search(int[] A, int target) {
    if(A.length==0) return -1;
    int lo = 0;
    int hi = A.length - 1;
    while (lo < hi) {
        int mid = (lo + hi) / 2;
        if (A[mid] == target) return mid;
        
        if (A[lo] <= A[mid]) {
            if (target >= A[lo] && target < A[mid]) {
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        } else {
            if (target > A[mid] && target <= A[hi]) {
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
        }
    }
    return A[lo] == target ? lo : -1;
}
}
