java:
public class Solution {
    public int minPathSum(int[][] grid) {
       int row=grid.length;
       if(row==0) return 0;
       int column=grid[0].length;
       for(int i=1;i<column;i++){
           grid[0][i]=grid[0][i]+grid[0][i-1];
       }
       for(int j=1;j<row;j++){
           grid[j][0]=grid[j][0]+grid[j-1][0];
       }
       
       for(int j=1;j<row;j++){
           for(int i=1;i<column;i++){
               grid[j][i]=grid[j][i]+Math.min(grid[j-1][i],grid[j][i-1]);
           }
       }
       return grid[row-1][column-1];
    }
    
}

public class Solution {
    public int minPathSum(int[][] grid) {
       int row=grid.length;
       if(row==0) return 0;
       int column=grid[0].length;
       int[] cur=new int[row];
       cur[0]=grid[0][0];
       for(int i=1;i<row;i++){
           cur[i]=cur[i-1]+grid[i][0];
       }
       
       for(int j=1;j<column;j++){
           cur[0]+=grid[0][j];
           for(int i=1;i<row;i++){
              cur[i]=grid[i][j]+Math.min(cur[i],cur[i-1]);
           }
       }
       return cur[row-1];
    }
    
}
C++:
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
       int row=grid.size();
       if(row==0) return 0;
       int column=grid[0].size();
       vector<int> cur(row,grid[0][0]);
       for(int i=1;i<row;i++){
           cur[i]=cur[i-1]+grid[i][0];
       }
       
       for(int j=1;j<column;j++){
           cur[0]+=grid[0][j];
           for(int i=1;i<row;i++){
              cur[i]=grid[i][j]+min(cur[i],cur[i-1]);
           }
       }
       return cur[row-1];
    }
};
