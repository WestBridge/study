JAVA:
class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        List<Integer> res = new ArrayList<Integer>();
        if(nums.length == 0) return res;
         Arrays.sort(nums);
        int[] dp = new int[nums.length];
        Arrays.fill(dp, 1);
        int[] parent = new int[nums.length];
        Arrays.fill(parent, -1); 
        int max = 1, maxIndex = -1;
       
        for(int i = 0; i < nums.length; i++){       
             for(int j = i - 1; j >= 0; j--){
                if(nums[i] % nums[j] == 0 && dp[i] < dp[j] + 1){
                    dp[i] = dp[j] + 1;
                    parent[i] = j;
                    if(dp[i] > max){
                        max = dp[i];
                        maxIndex = i;
                    }
                }
                    
             }
            
           }
        if(maxIndex == -1) {
            res.add(nums[0]);
            return res;
        }
        int index = maxIndex;
        while(index != -1){
             res.add(nums[index]);
             index = parent[index];
             
         }
        return res;
     }
}
C++:
class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        vector<int> res;
        int n = nums.size();
        if(n == 0) return res;
        vector<int> dp(n, 1);
        vector<int> pre(n, -1);
        sort(nums.begin(), nums.end());
        int max = 1, maxIndex = -1;
        for(int i = 0; i < n; i++){
            for(int j = i - 1; j >= 0; j--){
                if(nums[i] % nums[j] == 0 && dp[i] < dp[j] + 1){
                    dp[i] = dp[j] + 1;
                    pre[i] = j;
                    if(dp[i] > max){
                        max = dp[i];
                        maxIndex = i;
                    }
                }
            }
        }
        if(maxIndex == -1){
            res.push_back(nums[0]);
            return res;    
        }
        int index = maxIndex;
        while(index != -1){
            res.push_back(nums[index]);
            index = pre[index];
            
        }
        return res;
    }
};
