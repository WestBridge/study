java:
public class Solution {
    public boolean search(int[] nums, int target) {
         int left = 0, right =  nums.length -1, mid;
        
        while(left<=right)
        {
            mid = (left + right) >> 1;
            if(nums[mid] == target) return true;

           
            if( (nums[left] == nums[mid]) && (nums[right] == nums[mid]) ) {++left; --right;}

            else if(nums[left] <= nums[mid])
            {
                if( (nums[left]<=target) && (nums[mid] > target) ) right = mid-1;
                else left = mid + 1; 
            }
            else
            {
                if((nums[mid] < target) &&  (nums[right] >= target) ) left = mid+1;
                else right = mid-1;
            }
        }
        return false;
    }
}

c++:
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int left,right,mid;
        left = 0;
        right = nums.size() - 1;
        if(right < 0) return false;
        while(left < right){
            mid = (left + right) / 2;
            if(target == nums[mid]) return true;
            if(nums[right] < nums[mid]){
                if(target >= nums[left] && target < nums[mid]){
                    right = mid;
                    
                }
                else
                  left = mid + 1;
                
            }
            else if(nums[right] > nums[mid]){
                if(target > nums[mid] && target <= nums[right]){
                    left = mid + 1;
                }
                else{
                    right = mid;
                }
                
            }
            else{
                right--;
            }
        }
        
        return nums[left] == target? true: false;
    }
};
