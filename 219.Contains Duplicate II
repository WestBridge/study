java:
public class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        if(k==0||nums.length<=1) return false;
       HashMap<Integer,Integer> hp=new HashMap<Integer,Integer>();
       for(int i=0;i<nums.length;i++){
           if(hp.containsKey(nums[i])&&(i-hp.get(nums[i])<=k))
           {
               return true;
           }
           hp.put(nums[i],i);
       }
       return false;
       
    }
}

C++:

class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        unordered_set<int> s;
       
       if (k <= 0) return false;
       if (k >= nums.size()) k = nums.size() - 1;
       
       for (int i = 0; i < nums.size(); i++)
       {
           if (i > k) s.erase(nums[i - k - 1]);
           if (s.find(nums[i]) != s.end()) return true;
           s.insert(nums[i]);
       }
       
       return false;
    }
};
java:
public class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        
        Set<Integer> set = new HashSet<Integer>();
        for(int i = 0; i < nums.length; i++){
            if(i > k) set.remove(nums[i-k-1]);
            if(!set.add(nums[i])) return true;
        }
        return false;
    }
}
